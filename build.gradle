apply plugin: 'java'
apply plugin: 'lenskit'

repositories {
    if (project.findProperty('maven.useLocal') == 'yes') {
        mavenLocal()
    }
    // We use snapshots from the local repository
    maven {
        url project.uri('lenskit-repo-3.0-SNAPSHOT')
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    mavenCentral()
}

dependencies {
    compile "org.lenskit:lenskit-all:3.0-SNAPSHOT"
    runtime "org.lenskit:lenskit-cli:3.0-SNAPSHOT"
}

sourceCompatibility = '1.8'

/* Configure LensKit */
lenskit {
}

import org.lenskit.gradle.*

task cleanData {
    doLast {
        delete 'data'
        exclude '*.yaml'
    }
}

task exportModels {
    inputs.file 'models/model.md'
    inputs.file 'models/profile-plate.mp'
    inputs.file 'models/reclist-plate.mp'
    outputs.file 'models/profile.stan'
    outputs.file 'models/full.stan'
    outputs.file 'models/model.pdf'
    outputs.file 'models/profile-plate.pdf'
    outputs.file 'models/reclist-plate.pdf'

    doLast {
        exec {
            executable 'mptopdf'
            workingDir 'models'
            args '-interaction=errorstopmode'
            args 'profile-plate.mp'
        }
        exec {
            executable 'mptopdf'
            workingDir 'models'
            args '-interaction=errorstopmode'
            args 'reclist-plate.mp'
        }
    }

    doLast {
        def ppB = new ProcessBuilder("pp", "model.md")
        ppB.directory(file('models'))
        def pandocB = new ProcessBuilder("pandoc", "-o", "model.pdf", "-f", "markdown+yaml_metadata_block")
        pandocB.directory(file('models'))
        ppB.redirectOutput(ProcessBuilder.Redirect.PIPE);
        pandocB.redirectInput(ProcessBuilder.Redirect.PIPE);
        def pp = ppB.start()
        def pandoc = pandocB.start()
        pp.pipeTo(pandoc)
        def rc
        if ((rc = pp.waitFor()) != 0) {
            throw new RuntimeException("pp failed with code ${rc}")
        }
        if ((rc = pandoc.waitFor()) != 0) {
            throw new RuntimeException("pandoc failed with code ${rc}")
        }
    }
}

task exportAuthorGenders(type: Exec, group: 'export') {
    outputs.file "$buildDir/author-gender.csv"

    executable 'Rscript'
    args 'preproc/export-authors.R'

    doFirst {
        mkdir buildDir
    }

    onlyIf {
        !file("$buildDir/author-gender.csv").exists()
    }
}

apply from: 'bx.gradle'
apply from: 'amazon.gradle'
apply from: 'sweep.gradle'
apply from: 'sweep-az.gradle'

task makeCodeArchive(type: Zip) {
    archiveName = "exploring-author-gender-code.zip"

    from projectDir
    into 'exploring-author-gender'
    
    exclude '.git'
    exclude '.gradle'
    exclude 'build'
    exclude 'buildSrc/.gradle'
    exclude 'buildSrc/build'
    exclude 'batch-eval.sh', 'run-eval.sh'
    exclude '*/node_modules'
    exclude 'ol-processing-tools/data/*.gz'
    exclude 'ol-processing-tools/data/*.csv'
    exclude 'paper'
    exclude 'tech-report'
    exclude '.idea'
    exclude '.ipynb_checkpoints'
}